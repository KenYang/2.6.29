#ifndef __SOCLE_SPI_REGS_H_INCLUDED
#define __SOCLE_SPI_REGS_H_INCLUDED

/*
 *  Registers for SPI
 *  */
#define SOCLE_SPI_TXR 0x0000 /* SPI transmit FIFO input */
#define SOCLE_SPI_RXR 0x0000 /* SPI receiver FIFO output */
#define SOCLE_SPI_IER 0x0004 /* enable/mask interrupts generated by SPI */
#define SOCLE_SPI_FCR 0x0008 /* SPI FIFO control register */
#define SOCLE_SPI_FWCR 0x000C /* SPI transaction flow control register */
#define SOCLE_SPI_DLYCR 0x0010 /* SPI dely control register */
#define SOCLE_SPI_TXCR 0x0014 /* transmit counter */
#define SOCLE_SPI_RXCR 0x0018 /* receive counter */
#define SOCLE_SPI_SSCR 0x001C /* SPI slave select and characteristic register */
#define SOCLE_SPI_ISR 0x0020 /* SPI interrupt status register */
#define SOCLE_SPI_FIFO_STATUS 0x0024 //for 9220 spi slave
#define SOCLE_SPI_TX_REG0     0x0028 //for 9220 spi slave
#define SOCLE_SPI_TX_REG1     0x002C //for 9220 spi slave
#define SOCLE_SPI_TX_REG2     0x0030 //for 9220 spi slave
#define SOCLE_SPI_TX_REG3     0x0034 //for 9220 spi slave
#define SOCLE_SPI_RX_REG0     0x0038 //for 9220 spi slave
#define SOCLE_SPI_RX_REG1     0x003C //for 9220 spi slave
#define SOCLE_SPI_RX_REG2     0x0040 //for 9220 spi slave
#define SOCLE_SPI_RX_REG3     0x0044 //for 9220 spi slave
#define SOCLE_SPI_FIFO_SIZE 8

/*
 *  SOCLE_SPI_IER
 *  */
//Character length mismatch interrupt enable bit. (CHARLNIEN) (Slave only)
#define SOCLE_SPI_IER_CHAR_LEN_INT_EN (0x1 << 11)
//Rx register 3 data available interrupt enable bit. (RXREG3IEN) (Slave only) 
#define SOCLE_SPI_IER_RX_REG3_INT_EN (0x1 << 10)
//Rx register 2 data available interrupt enable bit. (RXREG2IEN) (Slave only)
#define SOCLE_SPI_IER_RX_REG2_INT_EN (0x1 << 9)
//Rx register 1 data available interrupt enable bit. (RXREG1IEN) (Slave only)
#define SOCLE_SPI_IER_RX_REG1_INT_EN (0x1 << 8)
//Rx register 0 data available interrupt enable bit. (RXREG0IEN) (Slave only)
#define SOCLE_SPI_IER_RX_REG0_INT_EN (0x1 << 7)
//Transmit FIFO empty interrupt enable bit. (TXFEIEN)
#define SOCLE_SPI_IER_TXFIFO_EMPTY_INT_DIS 0x0
#define SOCLE_SPI_IER_TXFIFO_EMPTY_INT_EN (0x1 << 6)
//Slave select signal rising detection enable bit. (SSNRIEN) (Slave only)
#define SOCLE_SPI_IER_SS_INT_DIS 0x0
#define SOCLE_SPI_IER_SS_INT_EN (0x1 << 5)
//Receive data available enable bit. (RXAVIEN)
#define SOCLE_SPI_IER_RXAVAIL_INT_DIS 0x0
#define SOCLE_SPI_IER_RXAVAIL_INT_EN (0x1 << 4)
/* Transmit FIFO interrupt enable bit (TxFIFN) */
#define SOCLE_SPI_IER_TXFIFO_INT_DIS 0x0 /* disable */
#define SOCLE_SPI_IER_TXFIFO_INT_EN (0x1 << 3) /* enable */

/* Receive FIFO interrupt enable bit (RxFIEN) */
#define SOCLE_SPI_IER_RXFIFO_INT_DIS 0x0 /* disable */
#define SOCLE_SPI_IER_RXFIFO_INT_EN (0x1 << 2) /* enable */

/* Receive FIFO overrun interrupt enable bit (RxFOIEN) */
#define SOCLE_SPI_IER_RXFIFO_OVR_INT_DIS 0x0 /* disable */
#define SOCLE_SPI_IER_RXFIFO_OVR_INT_EN (0x1 << 1)	/* enable */

/* Receive transfer complete interrupt enable bit (RxCIEN) */
#define SOCLE_SPI_IER_RX_COMPLETE_INT_DIS 0x0 /* disable */
#define SOCLE_SPI_IER_RX_COMPLETE_INT_EN 0x1 /* enable */

/*
 *  SOCLE_SPI_FCR
 *  */
/* Define  the receive FIFO interrupt trigger level */
#define SOCLE_SPI_RXFIFO_INT_TRIGGER_LEVEL_2 0x0 /* 2 entries */
#define SOCLE_SPI_RXFIFO_INT_TRIGGER_LEVEL_4 (0x1 << 11) /* 4 entries */
#define SOCLE_SPI_RXFIFO_INT_TRIGGER_LEVEL_6 (0x2 << 11) /* 6 entries */

/* Define the transmit FIFO interrupt trigger level */
#define SOCLE_SPI_TXFIFO_INT_TRIGGER_LEVEL_2 0x0 /* 2 entries */
#define SOCLE_SPI_TXFIFO_INT_TRIGGER_LEVEL_4 (0x1 << 8) /* 4 entries */
#define SOCLE_SPI_TXFIFO_INT_TRIGGER_LEVEL_6 (0x2 << 8) /* 6 entries */

/* Writing a '1' to this bit clears the Receiver FIFO and resets its logic */
#define SOCLE_SPI_RXFIFO_NCLR 0x0	/* not clear */
#define SOCLE_SPI_RXFIFO_CLR (0x1 << 3) /* clear */

/* Writing a '1' to this bit clears the Transmitter FIFO and resets its logic */
#define SOCLE_SPI_TXFIFO_NCLR 0x0	/* not clear */
#define SOCLE_SPI_TXFIFO_CLR (0x1 << 2) /* clear */

/* Transmit FIFO full flag (TxFF) */
#define SOCLE_SPI_TXFIFO_FULL (0x1 << 1) /* this bit is set whenever transmit FIFO is full */

/* Receive data available flag (RxDAF) */
#define SOCLE_SPI_RXFIFO_DATA_AVAIL 0x1 /* this bit is set whenever at least has one data entry available in receive FIFO */

/*
 *  SOCLE_SPI_FWCR
 *  */
//Slave select signal control enable bit (SSC). (Master only)
#define SOCLE_SPI_MASTER_SIGNAL_CTL_HW 0x0
#define SOCLE_SPI_MASTER_SIGNAL_CTL_SW (0x1 << 14)
//Slave select signal active bit (SSA). (Master R/W, and Slave read only)
#define SOCLE_SPI_MASTER_SIGNAL_ACT_NO (0x1 << 13)
#define SOCLE_SPI_MASTER_SIGNAL_ACT 0x0
//SPI master/slave mode (SPIMD)
#define SOCLE_SPI_MODE_SLAVE 0x0
#define SOCLE_SPI_MODE_MASTER (0x1 << 12)
/* SPI master core soft reset bit (SRST_N) */
#define SOCLE_SPI_MASTER_SOFT_N_RST 0x0 /* don't reset the SPI master core logic */
#define SOCLE_SPI_MASTER_SOFT_RST (0x1 << 11) /* reset the SPI master core logic */

/* SPI master enable (SPIEN). This enable the SPI master core */
#define SOCLE_SPI_MASTER_DIS 0x0	/* disable the SPI master */
#define SOCLE_SPI_MASTER_EN (0x1 << 10) /* enable the SPI master */

/* SPI run bit (SPIRUN) */
#define SOCLE_SPI_TXRX_N_RUN 0x0	/* SPI master core don't run */
#define SOCLE_SPI_TXRX_RUN (0x1 << 9)	/* SPI master core run */

/* SPI clock idle enable bit (CKIDLEN) */
#define SOCLE_SPI_CLK_IDLE_NAST 0x0 /* SPI clock could not be asserted in an idle state */
#define SOCLE_SPI_CLK_IDLE_AST (0x1 << 8) /* SPI clock could be asserted in an idle state
 */

#define SOCLE_SPI_DMA_REQ (1 << 6)			//20100607 jerry+ for SPI Hardware DMA
/* Transmit and receive simultaneously transfer enable (TxRxsten) */
#define SOCLE_SPI_TXRX_SIMULT_DIS 0x0 /* Tx and Rx would not concurrently happen */
#define SOCLE_SPI_TXRX_SIMULT_EN (0x1 << 5) /* Tx and Rx would concurrently happen */

/* SPI clock polarity bit (CPOL) */
#define SOCLE_SPI_CPOL_0 0x0	/* SCLK is low when idle */
#define SOCLE_SPI_CPOL_1 (0x1 << 4) /* SLCK is high when idle */

/* Clock Phase Bit (CPHA) */
#define SOCLE_SPI_CPHA_0 0x0 /* data is valid on first SCLK edge (rising or falling) after slave select has asserted */
#define SOCLE_SPI_CPHA_1 (0x1 << 3) /* data is valid on second SCLK edge (rising or falling) after slave select has asserted*/

/* LSB-First Enable (LSBEN) */
#define SOCLE_SPI_TX_MSB_FIRST 0x0 	/* MSB first transfer */
#define SOCLE_SPI_TX_LSB_FIRST (0x1 << 2) /* LSB first transfer */

/* Bidirectional mode enable (BIDIREN) */
#define SOCLE_SPI_MODE_UNI_DIR 0x0 /* unidirectional mode */
#define SOCLE_SPI_MODE_BI_DIR (01 << 1) /* bidirectional mode */

/* Look back mode (LBKMD) */
#define SOCLE_SPI_OP_NORMAL 0x0	/* normal operation mode */
#define SOCLE_SPI_OP_LOOPBACK 0x1	/* look back mode */

/*
 *  SOCLE_SPI_DLYCR
 *  */
/* Period between Tx and Rx transfer (PBTxRx) */
#define SOCLE_SPI_PBTXRX_DELAY_NONE 0x0 /* non spi clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_4 (0x1 << 8) /* 4 SPI clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_8 (0x2 << 8) /* 8 SPI clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_16 (0x3 << 8) /* 16 SPI clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_32 (0x4 << 8) /* 32 SPI clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_64 (0x5 << 8) /* 64 SPI clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_128 (0x6 << 8)	/* 128 SPI clock delay */
#define SOCLE_SPI_PBTXRX_DELAY_256 (0x7 << 8)	/* 256 SPI clock delay */

/* Period between two consecutive trnasfer (PBCT) */
#define SOCLE_SPI_PBCT_DELAY_NONE 0x0 /* non spi clock delay */
#define SOCLE_SPI_PBCT_DELAY_4 (0x1 << 3) /* 4 SPI clock delay */
#define SOCLE_SPI_PBCT_DELAY_8 (0x2 << 3) /* 8 SPI clock delay */
#define SOCLE_SPI_PBCT_DELAY_16 (0x3 << 3) /* 16 SPI clock delay */
#define SOCLE_SPI_PBCT_DELAY_32 (0x4 << 3) /* 32 SPI clock delay */
#define SOCLE_SPI_PBCT_DELAY_64 (0x5 << 3) /* 64 SPI clock delay */
#define SOCLE_SPI_PBCT_DELAY_128 (0x6 << 3)	/* 128 SPI clock delay */
#define SOCLE_SPI_PBCT_DELAY_256 (0x7 << 3)	/* 256 SPI clock delay */

/* Period before SPI clock active (PBCA) */
#define SOCLE_SPI_PBCA_DELAY_1_2 0x0 /* 1/2 spi clock delay */
#define SOCLE_SPI_PBCA_DELAY_4 0x1 /* 4 SPI clock delay */
#define SOCLE_SPI_PBCA_DELAY_8 0x2 /* 8 SPI clock delay */
#define SOCLE_SPI_PBCA_DELAY_16 0x3 /* 16 SPI clock delay */
#define SOCLE_SPI_PBCA_DELAY_32 0x4 /* 32 SPI clock delay */
#define SOCLE_SPI_PBCA_DELAY_64 0x5 /* 64 SPI clock delay */
#define SOCLE_SPI_PBCA_DELAY_128 0x6	/* 128 SPI clock delay */
#define SOCLE_SPI_PBCA_DELAY_256 0x7	/* 256 SPI clock delay */

/*
 *  SOCLE_SPI_SSCR
 *  */
/* Character length determines bits (SPICHRL) */
#define SOCLE_SPI_CHAR_LEN_4 (0x3 << 11) /* 4 bits */
#define SOCLE_SPI_CHAR_LEN_5 (0x4 << 11) /* 5 bits */
#define SOCLE_SPI_CHAR_LEN_6 (0x5 << 11) /* 6 bits */
#define SOCLE_SPI_CHAR_LEN_7 (0x6 << 11) /* 7 bits */
#define SOCLE_SPI_CHAR_LEN_8 (0x7 << 11) /* 8 bits */
#define SOCLE_SPI_CHAR_LEN_9 (0x8 << 11) /* 9 bits */
#define SOCLE_SPI_CHAR_LEN_10 (0x9 << 11) /* 10 bits */
#define SOCLE_SPI_CHAR_LEN_11 (0xA << 11) /* 11 bits */
#define SOCLE_SPI_CHAR_LEN_12 (0xB << 11) /* 12 bits */
#define SOCLE_SPI_CHAR_LEN_13 (0xC << 11) /* 13 bits */
#define SOCLE_SPI_CHAR_LEN_14 (0xD << 11) /* 14 bits */
#define SOCLE_SPI_CHAR_LEN_15 (0xE << 11) /* 15 bits */
#define SOCLE_SPI_CHAR_LEN_16 (0xF << 11) /* 16 bits */

/* SPI slave select register (SPISSR) */
#define SOCLE_SPI_SLAVE_SEL_0 0x0	/* slave0 device (SS_N[0]) is set to an active state */
#define SOCLE_SPI_SLAVE_SEL_1 (0x1 << 8) /* slave0 device (SS_N[1]) is set to an active state*/
#define SOCLE_SPI_SLAVE_SEL_2 (0x2 << 8) /* slave0 device (SS_N[2]) is set to an active state */
#define SOCLE_SPI_SLAVE_SEL_3 (0x3 << 8) /* slave0 device (SS_N[3]) is set to an active state*/
#define SOCLE_SPI_SLAVE_SEL_4 (0x4 << 8) /* slave0 device (SS_N[4]) is set to an active state */
#define SOCLE_SPI_SLAVE_SEL_5 (0x5 << 8) /* slave0 device (SS_N[5]) is set to an active state*/
#define SOCLE_SPI_SLAVE_SEL_6 (0x6 << 8) /* slave0 device (SS_N[6]) is set to an active state */
#define SOCLE_SPI_SLAVE_SEL_7 (0x7 << 8) /* slave0 device (SS_N[7]) is set to an active state */

#define SOCLE_SPI_SLAVE_SEL(x) (((x) & 0xf) << 8)

/* SPI clock divisor bits (SPIDIVR) */
#define SOCLE_SPI_CLK_DIV(x) ((x) & 0x3f)

/*
 *  SOCLE_SPI_ISR
 *  */
//Character length mismatch interrupt flag. (CHARLNIF) (Slave only)
#define SOCLE_SPI_CHAR_LEN_INT (0x1 << 11)
//Rx register 3 data available interrupt flag. (RXREG3IF) (Slave only)
#define SOCLE_SPI_RX_REG3_INT (0x1 << 10)
//Rx register 2 data available interrupt flag. (RXREG2IF) (Slave only)
#define SOCLE_SPI_RX_REG2_INT (0x1 << 9)
//Rx register 1 data available interrupt flag. (RXREG1IF) (Slave only)
#define SOCLE_SPI_RX_REG1_INT (0x1 << 8)
//Rx register 0 data available interrupt flag. (RXREG0IF) (Slave only)
#define SOCLE_SPI_RX_REG0_INT (0x1 << 7)
//Transmit FIFO empty interrupt flag. (TXFEIF)
#define SOCLE_SPI_TXFIFO_EMPTY_INT (0x1 << 6)
//Slave select signal rising interrupt flag. (SSNRIF) (Slave only)
#define SOCLE_SPI_SLAVE_SIGNAL_INT (0x1 << 5)
//Receive data available interrupt flag. (RXAVIF)
#define SOCLE_SPI_RX_DATA_AVAIL_INT (0x1 << 4)
/* Transmit FIFO Interrupt Flag (TxFIF) */
#define SOCLE_SPI_TXFIFO_INT (0x1 << 3) /* this bit is set when the transimt FIFO trigger level is reached */

/* Receive FIFO Interrupt flag (RxFIF) */
#define SOCLE_SPI_RXFIFO_INT (0x1 << 2) /* this bit is set whenever the receive FIFO trigger level is reached */

/* SPI overrun Interrupt flag (SPIORIF) */
#define SOCLE_SPI_RXFIFO_OVR_INT (0x1 << 1) /* if the receive FIFO is full and another character has been received in the receiver shift register */

/* Receive complete Interrupt flag (RxCIF) */
#define SOCLE_SPI_RX_COMPLETE_INT 0x1 /* this bit is set whenever the receive transaction is over */

/*
 *  SOCLE_SPI_FIFO_STATUS for PDK9220
 *  */
//Receive FIFO full bit. (RxFF_FULL)
#define SOCLE_SPI_SLAVE_RxFF_FULL (0x1 << 6)
//Receive FIFO half full bit. (RxFF_HALFFULL)
#define SOCLE_SPI_SLAVE_RxFF_HALFFULL (0x1 << 5)
//Receive FIFO empty bit. (RxFF_EMPTY)
#define SOCLE_SPI_SLAVE_RxFF_EMPTY (0x1 << 4)
//Transmit FIFO full bit. (TxFF_FULL)
#define SOCLE_SPI_SLAVE_TxFF_FULL (0x1 << 2)
//Transmit FIFO half full bit. (TxFF_HALFFULL)
#define SOCLE_SPI_SLAVE_TxFF_HALFFULL (0x1 << 1)
//Transmit FIFO empty bit. (TxFF_EMPTY)
#define SOCLE_SPI_SLAVE_TxFF_EMPTY (0x1)

#endif
